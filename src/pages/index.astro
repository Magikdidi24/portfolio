---
import BaseLayout from '../layout/BaseLayout.astro';
import 'aos/dist/aos.css';
import { Image } from 'astro:assets';
import localBirdImage from '../../public/img/photo_samuel.png';
import lapin_g from '../../public/img/lapin-g.png';
import lapin_d from '../../public/img/lapin-d.png';
import { getCollection } from 'astro:content';
import ProjectCard from '../components/ProjectCard.astro';
import ProjectCard_perso from '../components/ProjectCard_perso.astro';
import PillModal from '../components/PillModal.astro';

const projects = await getCollection('projects');
const personal = await getCollection('personalProjects');
---

<BaseLayout title="My Porfolio">
  <!-- Overlay du terminal Matrix qui cache tout le contenu -->
  <div id="matrix-terminal-overlay" class="fixed inset-0 bg-black z-50 flex flex-col items-center justify-center">
    <!-- Hero Section (uniquement affichée dans l'overlay) -->
    <section class="text-center py-16 max-w-4xl mx-auto">
      <img
        src="/portfolio/img/neo_cannard.png"
        alt="Me & Myself"
        class="rounded-full w-48 h-48 mx-auto shadow-lg"
        data-aos="zoom-in"
      />
      <h1
        id="hero-title"
        class="font-sans text-4xl font-mono font-bold text-green-400 mt-6"
        data-aos="fade-up"
      >
        Hi, I'm Samuel
      </h1>
      <p
        id="hero-description"
        class="mt-4 text-lg font-mono font-bold text-green-400 max-w-2xl mx-auto"
        data-aos="fade-up"
        data-aos-delay="200"
      >
        Currently in my third year at EPITA, I'm studying to become a computer engineer.
      </p>

      <!-- Terminal interactif -->
      <div id="terminal-container" class="mt-8 max-w-3xl mx-auto text-left bg-black p-6 rounded-md border border-green-500 shadow-lg shadow-green-500/20">
        <div id="terminal-output" class="text-green-500 font-mono text-xl">
          <span class="terminal-prompt"></span> <span id="terminal-text"></span><span class="terminal-cursor">█</span>
        </div>
        <div id="terminal-input-container" class="mt-4 flex">
          <span class="terminal-prompt text-green-500 font-mono text-xl">></span>
          <input 
            id="terminal-input" 
            type="text"
            class="ml-2 bg-black text-green-500 font-mono text-xl outline-none border-none flex-grow"
            placeholder="Tap enter to continue"
          />
        </div>
      </div>
    </section>
  </div>

  <!-- Initialisation d'AOS pour les animations scroll -->
  <script>
    import AOS from 'aos';
    AOS.init({ once: true, duration: 800 });
  </script>

  <!-- Section de présentation détaillée -->
  <section id="presentation" class="py-20 bg-black/30 backdrop-blur-sm rounded-lg mx-4 md:mx-12 my-12">
    <div class="container mx-auto px-4 md:px-8">
      <div class="flex flex-col md:flex-row items-center">
        <div class="md:w-1/3 mb-8 md:mb-0">
          <div class="relative" data-aos="fade-right">
            <div class="absolute inset-0 bg-green-500/20 rounded-lg transform rotate-3"></div>
              <div class="relative w-full h-64 md:h-80 overflow-hidden rounded-lg shadow-xl z-10">
                <Image
                  src={localBirdImage}
                  alt="Samuel - Portrait"
                  class="w-full h-full object-cover"
                />
              </div>
            <div class="absolute top-0 left-0 w-full h-full bg-gradient-to-br from-green-500/30 to-transparent rounded-lg z-20"></div>
          </div>
        </div>
        
        <div class="md:w-2/3 md:pl-12" data-aos="fade-left" data-aos-delay="200">
          <h2 class="text-3xl font-bold text-white mb-6 border-b border-green-500 pb-3 inline-block">
            About Me
          </h2>
          <p class="text-white/90 mb-4 text-lg">
            Hello! I'm Samuel, a passionate computer engineering student in my third year at EPITA.
            This portfolio showcases a selection of projects I have worked on during my academic journey and beyond!
          </p>
          <p class="text-white/90 mb-4 text-lg">
            I'm currently an engineering student working with various programming languages and technologies:
            <div class="flex flex-wrap gap-2 mt-4">
              <span class="bg-green-900/50 text-green-400 px-3 py-1 rounded-full text-xs border border-green-500/30">C/C++</span>
              <span class="bg-green-900/50 text-green-400 px-3 py-1 rounded-full text-xs border border-green-500/30">Python</span>
              <span class="bg-green-900/50 text-green-400 px-3 py-1 rounded-full text-xs border border-green-500/30">Java</span>
              <span class="bg-green-900/50 text-green-400 px-3 py-1 rounded-full text-xs border border-green-500/30">PostgreSQL</span>
              <span class="bg-green-900/50 text-green-400 px-3 py-1 rounded-full text-xs border border-green-500/30">Git</span>
              <span class="bg-green-900/50 text-green-400 px-3 py-1 rounded-full text-xs border border-green-500/30">Docker</span>
            </div>
          </p>
          <p class="text-white/90 mb-4 text-lg">
            In the future, I aspire to become an engineer specializing in Artificial Intelligence.
          </p>
          <p class="text-white/90 mb-6 text-lg">
            In my free time, I enjoy reading manga, building projects like NAS systems and home servers, and rewatching The Matrix trilogy (as you might have guessed from this portfolio's theme).          </p>
        </div>
      </div>
    </div>
  </section>

  <!-- Section Projets Académiques -->
  <section
    id="projects"
    class="relative mx-4 md:mx-12 rounded-lg bg-black/30 backdrop-blur-sm overflow-hidden"
    style="padding-top: 3rem; /* remplace py-12 */"
  >
    <!-- Titre avec ID pour l'effet Matrix -->
    <h2 id="academic-projects-title" class="text-3xl font-mono font-bold text-green-400 mb-8 text-center">
      My academic projects
    </h2>

    <!-- Slider (scrollable) -->
    <div class="overflow-hidden">
      <div id="sliderTrack" class="slider-track flex transition-transform duration-500 ease">
        {projects.map((p: unknown, _i: any) => (
          <div class="slider-item flex-shrink-0 w-full px-4">
            <ProjectCard project={p} />
          </div>
        ))}
      </div>
    </div>

    <div
      class="absolute left-1/2 bottom-4 transform -translate-x-1/2 flex items-center space-x-4 z-10"
    >
      <button id="prevBtn" class="w-12 h-15 p-0">
        <Image src={lapin_d} alt="Précédent" class="w-full h-full" />
      </button>
      <div id="dots" class="flex space-x-2">
        {projects.map((_: any, i: unknown) => (
          <span
            class="dot w-3 h-3 rounded-full bg-green-600/50 cursor-pointer"
            data-index={i}
          ></span>
        ))}
      </div>
      <button id="nextBtn" class="w-12 h-15 p-0">
        <Image src={lapin_g} alt="Suivant" class="w-full h-full" />
      </button>
    </div>
  </section>

  <section id="personal-projects" class="relative mx-4 md:mx-12 rounded-lg bg-black/30 backdrop-blur-sm overflow-hidden pt-12 pb-8 mt-12">
    <h2 id="personal-projects-title" class="text-3xl font-mono font-bold text-green-400 mb-6 text-center">
      My own projects
    </h2>
    
    <div class="overflow-hidden">
      <div id="persTrack" class="slider-track flex transition-transform duration-500 ease">
        {personal.map((p: unknown) => (
          <div class="slider-item flex-shrink-0 w-full px-4">
            <ProjectCard_perso project={p} />
          </div>
        ))}
      </div>
    </div>
    
    <div
      class="absolute left-1/2 bottom-4 transform -translate-x-1/2 flex items-center space-x-4 z-10"
    >
      <button id="persPrev" class="w-12 h-15 p-0">
        <Image src={lapin_d} alt="Précédent" class="w-full h-full" />
      </button>
      <div id="persDots" class="flex space-x-2">
        {personal.map((_: any, i: unknown) => (
          <span
            class="dot w-3 h-3 rounded-full bg-green-600/50 cursor-pointer"
            data-index={i}
          ></span>
        ))}
      </div>
      <button id="persNext" class="w-12 h-15 p-0">
        <Image src={lapin_g} alt="Suivant" class="w-full h-full" />
      </button>
    </div>
  </section>







  <!-- Contact Section -->
  <section 
    id="contact" 
    class="relative mx-4 md:mx-12 rounded-lg bg-black/30 backdrop-blur-sm overflow-hidden py-16"
  >
    <div class="container mx-auto px-4 md:px-8">
      <h2 
        id="contact-title" 
        class="text-3xl font-mono font-bold text-green-400 mb-8 text-center"
      >
        Contact Me
      </h2>

      <div class="max-w-xl mx-auto bg-black/50 p-8 rounded-lg border border-green-500/30 shadow-lg shadow-green-500/20">
        <!-- Formulaire intercepté -->
      <form
        id="contact-form"
        action="https://formspree.io/f/mzzrjekp"
        method="POST"
        class="space-y-6 bg-black/70 backdrop-blur-sm p-8 rounded-lg border border-green-500/50 shadow-lg shadow-green-500/20"
      >
        <input type="text" name="_gotcha" class="hidden" />

        <input type="hidden" name="_subject" value="Nouveau message via portfolio" />

        <label class="block">
          <span class="text-green-400 font-mono mb-2 block">Your email:</span>
          <input
            type="email"
            name="email"
            required
            class="w-full bg-black/80 border border-green-500/60 text-green-400 font-mono rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-400"
          />
        </label>

        <label class="block">
          <span class="text-green-400 font-mono mb-2 block">Your message:</span>
          <textarea
            name="message"
            rows="5"
            required
            class="w-full bg-black/80 border border-green-500/60 text-green-400 font-mono rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-400 resize-none"
          ></textarea>
        </label>

        <button
          type="submit"
          class="w-full text-center font-mono font-bold text-green-400 bg-black/80 border border-green-500/60 px-6 py-3 rounded-full transition transform hover:scale-105 shadow-md shadow-green-500/40"
        >
          Send Message
        </button>
      </form>
    </div>
      <script type="module">
      const form = document.getElementById('contact-form');
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const data = new FormData(form);

        const res = await fetch(form.action, {
          method: form.method,
          body: data,
          headers: { 'Accept': 'application/json' }
        });

        if (res.ok) {
          window.location.href = '/portfolio/thank-you';
        } else {
          alert("Oups, une erreur s'est produite. Merci de réessayer.");
        }
      });
    </script>

      <div class="mt-12 flex justify-center space-x-6">
        <a 
          href="mailto:samuel.berthelot11@gmail.com" 
          target="_blank"
          aria-label="Send email to me"
          class="text-green-400 hover:text-green-300 transition duration-300 ease-in-out transform hover:scale-110"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="w-10 h-10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
            <polyline points="22,6 12,13 2,6"></polyline>
            <title></title>
          </svg>
        </a>
        <a 
          href="https://www.linkedin.com/in/berthelot11/" 
          target="_blank"
          aria-label="Linkedin"
          class="text-green-400 hover:text-green-300 transition duration-300 ease-in-out transform hover:scale-110"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="w-10 h-10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path>
            <rect x="2" y="9" width="4" height="12"></rect>
            <circle cx="4" cy="4" r="2"></circle>
          </svg>
        </a>
        <a 
          href="https://github.com/Magikdidi24"
          target="_blank" 
          aria-label="Github"
          class="text-green-400 hover:text-green-300 transition duration-300 ease-in-out transform hover:scale-110"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="w-10 h-10" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path>
          </svg>
        </a>
      </div>
    </div>
  </section>
  <PillModal />

  <footer class="bg-black/30 backdrop-blur-sm py-6 text-center">
    <div class="container mx-auto px-4">
      <p class="text-green-400 font-mono">
        © {new Date().getFullYear()} Samuel. All rights reserved.
      </p>
    </div>
  </footer>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const matrixChars = 'アァカサタナハマヤャラワガザダバパイィキシチニヒミリヰギジヂビピウゥクスツヌフムユュルグズヅブプエェケセテネヘメレヱゲゼデベペオォコソトノホモヨョロゴゾドボポヴン';
      
      function matrixEffect(element) {
        if (!element) return;
        
        const originalText = element.textContent;
        let iteration = 0;
        
        element.textContent = originalText.replace(/./g, () => 
          matrixChars[Math.floor(Math.random() * matrixChars.length)]
        );
        
        const interval = setInterval(() => {
          element.textContent = originalText.split('').map((letter, index) => {
            if (index < iteration) {
              return originalText[index];
            }
            return matrixChars[Math.floor(Math.random() * matrixChars.length)];
          }).join('');
          
          if (iteration >= originalText.length) {
            clearInterval(interval);
          }
          
          iteration += 1/3;
        }, 30);
      }
      
      // Fonction pour animer le terminal
      function typeText(text, element, speed = 50) {
        return new Promise(resolve => {
          let i = 0;
          element.textContent = '';
          
          function typing() {
            if (i < text.length) {
              element.textContent += text.charAt(i);
              i++;
              setTimeout(typing, speed);
            } else {
              resolve();
            }
          }
          
          typing();
        });
      }
      
      // Fonction pour révéler le contenu principal
      function revealMainContent() {
        // Animation de disparition de l'overlay
        const overlay = document.getElementById('matrix-terminal-overlay');
        overlay.style.transition = 'opacity 1.5s ease';
        overlay.style.opacity = '0';
        
        // Activer le défilement et supprimer l'overlay après la transition
        setTimeout(() => {
          document.body.style.overflow = 'auto';
          document.documentElement.style.overflow = 'auto';
          overlay.remove();
          
          // Appliquer les effets Matrix aux titres maintenant visibles
          setTimeout(() => {
            const elementsToAnimate = [
              'academic-projects-title',
              'personal-projects-title'
            ];
            
            elementsToAnimate.forEach((id, index) => {
              setTimeout(() => {
                matrixEffect(document.getElementById(id));
              }, index * 500);
            });
          }, 500);
        }, 1500);
      }
      
      // Bloquer le défilement initial
      document.body.style.overflow = 'hidden';
      document.documentElement.style.overflow = 'hidden';
      
      // Démarrer les effets Matrix sur les titres de l'overlay
      setTimeout(() => {
        matrixEffect(document.getElementById('hero-title'));
      }, 1000);
      
      setTimeout(() => {
        matrixEffect(document.getElementById('hero-description'));
      }, 2000);
      
      // Animer le curseur du terminal
      setInterval(() => {
        const cursor = document.querySelector('.terminal-cursor');
        if (cursor) {
          cursor.style.opacity = cursor.style.opacity === '0' ? '1' : '0';
        }
      }, 500);
      
      // Ajouter une lueur verte au terminal
      const terminalContainer = document.getElementById('terminal-container');
      setInterval(() => {
        terminalContainer.style.boxShadow = terminalContainer.style.boxShadow === '0 0 15px 2px rgba(34, 197, 94, 0.4)' ? 
          '0 0 25px 4px rgba(34, 197, 94, 0.6)' : '0 0 15px 2px rgba(34, 197, 94, 0.4)';
      }, 2000);
      
      // Gérer l'entrée du terminal
      const terminalInput = document.getElementById('terminal-input');
      const terminalText = document.getElementById('terminal-text');
      
      terminalInput.focus();
      
      terminalInput.addEventListener('keydown', async (e) => {
        if (e.key === 'Enter') {
          terminalInput.disabled = true;
          
          // Animation de texte façon Matrix
          await typeText('Wake Up Neo...', terminalText, 70);
          await new Promise(resolve => setTimeout(resolve, 800));
          
          terminalText.textContent = '';
          await typeText('You\'re in the matrix...', terminalText, 70);
          await new Promise(resolve => setTimeout(resolve, 800));
          
          terminalText.textContent = '';
          await typeText('Follow the white rabbit...', terminalText, 70);
          await new Promise(resolve => setTimeout(resolve, 800));
          
          terminalText.textContent = '';
          await typeText('Toc Toc Neo...', terminalText, 70);
          
          // Révéler le contenu principal après l'animation
          setTimeout(() => {
            revealMainContent();
          }, 1500);
        }
      });
      
      window.addEventListener('click', () => {
        if (terminalInput.disabled !== true) {
          terminalInput.focus();
        }
      });
    });
  </script>

  <!-- Script pour les sliders -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      function initSlider(trackId, prevId, nextId, dotsContainerId) {
        const track = document.getElementById(trackId);
        if (!track) return console.error(`Track element with ID "${trackId}" not found`);
        
        const prevBtn = document.getElementById(prevId);
        if (!prevBtn) return console.error(`Previous button with ID "${prevId}" not found`);
        
        const nextBtn = document.getElementById(nextId);
        if (!nextBtn) return console.error(`Next button with ID "${nextId}" not found`);
        
        const dotsContainer = document.getElementById(dotsContainerId);
        if (!dotsContainer) return console.error(`Dots container with ID "${dotsContainerId}" not found`);
        
        // Create dots dynamically based on number of slides
        dotsContainer.innerHTML = '';
        const totalSlides = track.children.length;
        
        for (let i = 0; i < totalSlides; i++) {
          const dot = document.createElement('span');
          dot.classList.add('dot', 'w-3', 'h-3', 'rounded-full', 'bg-green-600/50', 'cursor-pointer');
          dot.setAttribute('data-index', i.toString());
          dotsContainer.appendChild(dot);
        }
        
        const dots = Array.from(dotsContainer.querySelectorAll('.dot'));
        let currentIndex = 0;
        let autoScrollInterval;
        
        // Update the slider position and active dot
        function updateSlider(newIndex) {
          // Ensure index is within bounds in a circular way
          currentIndex = (newIndex + totalSlides) % totalSlides;
          
          // Update slider position
          track.style.transform = `translateX(-${currentIndex * 100}%)`;
          
          // Update active dot
          dots.forEach((dot, i) => {
            if (i === currentIndex) {
              dot.classList.remove('bg-green-600/50');
              dot.classList.add('bg-green-400');
            } else {
              dot.classList.remove('bg-green-400');
              dot.classList.add('bg-green-600/50');
            }
          });
        }
        
        // Start auto rotation
        function startAutoScroll() {
          stopAutoScroll();
          autoScrollInterval = setInterval(() => {
            updateSlider(currentIndex + 1);
          }, 10000); // 10 seconds
        }
        
        // Stop auto rotation
        function stopAutoScroll() {
          clearInterval(autoScrollInterval);
        }
        
        // Initialize
        updateSlider(0);
        startAutoScroll();
        
        // Handle previous button click
        prevBtn.addEventListener('click', () => {
          stopAutoScroll();
          updateSlider(currentIndex - 1);
          startAutoScroll();
        });
        
        // Handle next button click
        nextBtn.addEventListener('click', () => {
          stopAutoScroll();
          updateSlider(currentIndex + 1);
          startAutoScroll();
        });
        
        // Handle dot clicks
        dots.forEach((dot, i) => {
          dot.addEventListener('click', () => {
            stopAutoScroll();
            updateSlider(i);
            startAutoScroll();
          });
        });
      }
      
      // Une fois que l'overlay est retiré et que le contenu est visible
      function initSliders() {
        if (document.getElementById('matrix-terminal-overlay')) {
          // Si l'overlay est encore présent, attendez
          setTimeout(initSliders, 500);
          return;
        }
        
        // Initialiser les sliders
        initSlider('sliderTrack', 'prevBtn', 'nextBtn', 'dots');
        initSlider('persTrack', 'persPrev', 'persNext', 'persDots');
      }
      
      // Commencer la vérification après un court délai
      setTimeout(initSliders, 2000);
    });
  </script>

  <style>
    .slider-track { 
      transition: transform 0.5s ease; 
    }
    
    .slider-item { 
      width: 100%; 
    }
    
    /* Highlight for active dots */
    .dot {
      transition: background-color 0.3s ease;
    }
    
    .dot.bg-green-400 {
      box-shadow: 0 0 5px 2px rgba(74, 222, 128, 0.5);
    }
  </style>
</BaseLayout>
<script type="module" src="/src/scripts/pillModal.js"></script>
